name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Build and Test with Java 21
    
    env:
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_NAME: sorrentoDb
      DB_USER: root
      DB_PASSWORD: root

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      continue-on-error: true
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Start MariaDB database
      run: |
        docker run -d \
          --name mariadb-container \
          -e MARIADB_ROOT_PASSWORD=${{ env.DB_PASSWORD }} \
          -e MARIADB_DATABASE=${{ env.DB_NAME }} \
          -e MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=yes \
          -p ${{ env.DB_PORT }}:3306 \
          mariadb:10.11
        
        echo "Starting MariaDB container..."
        echo "Waiting for MariaDB to initialize..."
        
        # Wait for container to be running
        sleep 10
        
        # Check if container is running
        if ! docker ps | grep mariadb-container; then
          echo "MariaDB container failed to start"
          docker logs mariadb-container
          exit 1
        fi
        
        # Wait for MariaDB to be ready for connections
        for i in {1..60}; do
          if docker exec mariadb-container mysqladmin ping -h localhost -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --silent 2>/dev/null; then
            echo "MariaDB is ready and accepting connections!"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "MariaDB failed to start after 5 minutes"
            echo "Container logs:"
            docker logs mariadb-container
            echo "Container status:"
            docker ps -a | grep mariadb-container
            exit 1
          fi
          echo "Attempt $i/60: MariaDB initializing..."
          sleep 5
        done
        
        # Double-check database exists
        echo "Verifying database '${{ env.DB_NAME }}' exists..."
        docker exec mariadb-container mysql -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} -e "SHOW DATABASES;" | grep ${{ env.DB_NAME }} || {
          echo "Database not found, creating..."
          docker exec mariadb-container mysql -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ env.DB_NAME }};"
        }

    - name: Initialize database schema
      run: |
        if [ -f mysql-init/01-schema.sql ]; then
          echo "Initializing database schema..."
          # Ensure we're connecting to the right database
          docker exec -i mariadb-container mysql -h localhost -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} ${{ env.DB_NAME }} < mysql-init/01-schema.sql
          echo "Database schema initialized successfully"
        else
          echo "Schema file 'mysql-init/01-schema.sql' not found"
          echo "Available files in mysql-init directory:"
          ls -la mysql-init/ 2>/dev/null || echo "mysql-init directory does not exist"
          echo "Continuing without schema initialization..."
        fi

    - name: Run tests
      run: mvn clean test

    - name: Generate test report
      uses: dorny/test-reporter@v2
      if: success() || failure()
      with:
        name: Maven Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false

    - name: Build application
      run: mvn package -DskipTests

    - name: Upload WAR artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: sorrentomarina-${{ github.sha }}
        path: target/SorrentoMarina-1.0.war
        retention-days: 30

    - name: Cleanup
      if: always()
      run: |
        docker stop mariadb-container 2>/dev/null || true
        docker rm mariadb-container 2>/dev/null || true